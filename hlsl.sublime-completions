{
	"scope": "source.hlsl",

	"completions":
	[
		"hlsl",

		{ "trigger": "abort", "contents": "abort(${1:parameters})" },
		{ "trigger": "abs", "contents": "abs(${1:parameters})" },
		{ "trigger": "acos", "contents": "acos(${1:parameters})" },
		{ "trigger": "all", "contents": "all(${1:parameters})" },
		{ "trigger": "AllMemoryBarrier", "contents": "AllMemoryBarrier(${1:parameters})" },
		{ "trigger": "AllMemoryBarrierWithGroupSync", "contents": "AllMemoryBarrierWithGroupSync(${1:parameters})" },
		{ "trigger": "any", "contents": "any(${1:parameters})" },
		{ "trigger": "asdouble", "contents": "asdouble(${1:parameters})" },
		{ "trigger": "asfloat", "contents": "asfloat(${1:parameters})" },
		{ "trigger": "asin", "contents": "asin(${1:parameters})" },
		{ "trigger": "asint", "contents": "asint(${1:parameters})" },
		{ "trigger": "asuint", "contents": "asuint(${1:parameters})" },
		{ "trigger": "asuint", "contents": "asuint(${1:parameters})" },
		{ "trigger": "atan", "contents": "atan(${1:parameters})" },
		{ "trigger": "atan2", "contents": "atan2(${1:parameters})" },
		{ "trigger": "ceil", "contents": "ceil(${1:parameters})" },
		{ "trigger": "clamp", "contents": "clamp(${1:parameters})" },
		{ "trigger": "clip", "contents": "clip(${1:parameters})" },
		{ "trigger": "cos", "contents": "cos(${1:parameters})" },
		{ "trigger": "cosh", "contents": "cosh(${1:parameters})" },
		{ "trigger": "countbits", "contents": "countbits(${1:parameters})" },
		{ "trigger": "cross", "contents": "cross(${1:parameters})" },
		{ "trigger": "D3DCOLORtoUBYTE4", "contents": "D3DCOLORtoUBYTE4(${1:parameters})" },
		{ "trigger": "ddx", "contents": "ddx(${1:parameters})" },
		{ "trigger": "ddx_coarse", "contents": "ddx_coarse(${1:parameters})" },
		{ "trigger": "ddx_fine", "contents": "ddx_fine(${1:parameters})" },
		{ "trigger": "ddy", "contents": "ddy(${1:parameters})" },
		{ "trigger": "ddy_coarse", "contents": "ddy_coarse(${1:parameters})" },
		{ "trigger": "ddy_fine", "contents": "ddy_fine(${1:parameters})" },
		{ "trigger": "degrees", "contents": "degrees(${1:parameters})" },
		{ "trigger": "determinant", "contents": "determinant(${1:parameters})" },
		{ "trigger": "DeviceMemoryBarrier", "contents": "DeviceMemoryBarrier(${1:parameters})" },
		{ "trigger": "DeviceMemoryBarrierWithGroupSync", "contents": "DeviceMemoryBarrierWithGroupSync(${1:parameters})" },
		{ "trigger": "distance", "contents": "distance(${1:parameters})" },
		{ "trigger": "dot", "contents": "dot(${1:parameters})" },
		{ "trigger": "dst", "contents": "dst(${1:parameters})" },
		{ "trigger": "errorf", "contents": "errorf(${1:parameters})" },
		{ "trigger": "EvaluateAttributeAtCentroid", "contents": "EvaluateAttributeAtCentroid(${1:parameters})" },
		{ "trigger": "EvaluateAttributeAtSample", "contents": "EvaluateAttributeAtSample(${1:parameters})" },
		{ "trigger": "EvaluateAttributeSnapped", "contents": "EvaluateAttributeSnapped(${1:parameters})" },
		{ "trigger": "exp", "contents": "exp(${1:parameters})" },
		{ "trigger": "exp2", "contents": "exp2(${1:parameters})" },
		{ "trigger": "f16tof32", "contents": "f16tof32(${1:parameters})" },
		{ "trigger": "f32tof16", "contents": "f32tof16(${1:parameters})" },
		{ "trigger": "faceforward", "contents": "faceforward(${1:parameters})" },
		{ "trigger": "firstbithigh", "contents": "firstbithigh(${1:parameters})" },
		{ "trigger": "firstbitlow", "contents": "firstbitlow(${1:parameters})" },
		{ "trigger": "floor", "contents": "floor(${1:parameters})" },
		{ "trigger": "fma", "contents": "fma(${1:parameters})" },
		{ "trigger": "fmod", "contents": "fmod(${1:parameters})" },
		{ "trigger": "frac", "contents": "frac(${1:parameters})" },
		{ "trigger": "frexp", "contents": "frexp(${1:parameters})" },
		{ "trigger": "fwidth", "contents": "fwidth(${1:parameters})" },
		{ "trigger": "GetRenderTargetSampleCount", "contents": "GetRenderTargetSampleCount(${1:parameters})" },
		{ "trigger": "GetRenderTargetSamplePosition", "contents": "GetRenderTargetSamplePosition(${1:parameters})" },
		{ "trigger": "GroupMemoryBarrier", "contents": "GroupMemoryBarrier(${1:parameters})" },
		{ "trigger": "GroupMemoryBarrierWithGroupSync", "contents": "GroupMemoryBarrierWithGroupSync(${1:parameters})" },
		{ "trigger": "InterlockedAdd", "contents": "InterlockedAdd(${1:parameters})" },
		{ "trigger": "InterlockedAnd", "contents": "InterlockedAnd(${1:parameters})" },
		{ "trigger": "InterlockedCompareExchange", "contents": "InterlockedCompareExchange(${1:parameters})" },
		{ "trigger": "InterlockedCompareStore", "contents": "InterlockedCompareStore(${1:parameters})" },
		{ "trigger": "InterlockedExchange", "contents": "InterlockedExchange(${1:parameters})" },
		{ "trigger": "InterlockedMax", "contents": "InterlockedMax(${1:parameters})" },
		{ "trigger": "InterlockedMin", "contents": "InterlockedMin(${1:parameters})" },
		{ "trigger": "InterlockedOr", "contents": "InterlockedOr(${1:parameters})" },
		{ "trigger": "InterlockedXor", "contents": "InterlockedXor(${1:parameters})" },
		{ "trigger": "isfinite", "contents": "isfinite(${1:parameters})" },
		{ "trigger": "isinf", "contents": "isinf(${1:parameters})" },
		{ "trigger": "isnan", "contents": "isnan(${1:parameters})" },
		{ "trigger": "ldexp", "contents": "ldexp(${1:parameters})" },
		{ "trigger": "length", "contents": "length(${1:parameters})" },
		{ "trigger": "lerp", "contents": "lerp(${1:parameters})" },
		{ "trigger": "lit", "contents": "lit(${1:parameters})" },
		{ "trigger": "log", "contents": "log(${1:parameters})" },
		{ "trigger": "log10", "contents": "log10(${1:parameters})" },
		{ "trigger": "log2", "contents": "log2(${1:parameters})" },
		{ "trigger": "mad", "contents": "mad(${1:parameters})" },
		{ "trigger": "max", "contents": "max(${1:parameters})" },
		{ "trigger": "min", "contents": "min(${1:parameters})" },
		{ "trigger": "modf", "contents": "modf(${1:parameters})" },
		{ "trigger": "msad4", "contents": "msad4(${1:parameters})" },
		{ "trigger": "mul", "contents": "mul(${1:parameters})" },
		{ "trigger": "noise", "contents": "noise(${1:parameters})" },
		{ "trigger": "normalize", "contents": "normalize(${1:parameters})" },
		{ "trigger": "pow", "contents": "pow(${1:parameters})" },
		{ "trigger": "printf", "contents": "printf(${1:parameters})" },
		{ "trigger": "Process2DQuadTessFactorsAvg", "contents": "Process2DQuadTessFactorsAvg(${1:parameters})" },
		{ "trigger": "Process2DQuadTessFactorsMax", "contents": "Process2DQuadTessFactorsMax(${1:parameters})" },
		{ "trigger": "Process2DQuadTessFactorsMin", "contents": "Process2DQuadTessFactorsMin(${1:parameters})" },
		{ "trigger": "ProcessIsolineTessFactors", "contents": "ProcessIsolineTessFactors(${1:parameters})" },
		{ "trigger": "ProcessQuadTessFactorsAvg", "contents": "ProcessQuadTessFactorsAvg(${1:parameters})" },
		{ "trigger": "ProcessQuadTessFactorsMax", "contents": "ProcessQuadTessFactorsMax(${1:parameters})" },
		{ "trigger": "ProcessQuadTessFactorsMin", "contents": "ProcessQuadTessFactorsMin(${1:parameters})" },
		{ "trigger": "ProcessTriTessFactorsAvg", "contents": "ProcessTriTessFactorsAvg(${1:parameters})" },
		{ "trigger": "ProcessTriTessFactorsMax", "contents": "ProcessTriTessFactorsMax(${1:parameters})" },
		{ "trigger": "ProcessTriTessFactorsMin", "contents": "ProcessTriTessFactorsMin(${1:parameters})" },
		{ "trigger": "radians", "contents": "radians(${1:parameters})" },
		{ "trigger": "rcp", "contents": "rcp(${1:parameters})" },
		{ "trigger": "reflect", "contents": "reflect(${1:parameters})" },
		{ "trigger": "refract", "contents": "refract(${1:parameters})" },
		{ "trigger": "reversebits", "contents": "reversebits(${1:parameters})" },
		{ "trigger": "round", "contents": "round(${1:parameters})" },
		{ "trigger": "rsqrt", "contents": "rsqrt(${1:parameters})" },
		{ "trigger": "saturate", "contents": "saturate(${1:parameters})" },
		{ "trigger": "sign", "contents": "sign(${1:parameters})" },
		{ "trigger": "sin", "contents": "sin(${1:parameters})" },
		{ "trigger": "sincos", "contents": "sincos(${1:parameters})" },
		{ "trigger": "sinh", "contents": "sinh(${1:parameters})" },
		{ "trigger": "smoothstep", "contents": "smoothstep(${1:parameters})" },
		{ "trigger": "sqrt", "contents": "sqrt(${1:parameters})" },
		{ "trigger": "step", "contents": "step(${1:parameters})" },
		{ "trigger": "tan", "contents": "tan(${1:parameters})" },
		{ "trigger": "tanh", "contents": "tanh(${1:parameters})" },
		{ "trigger": "tex1D", "contents": "tex1D(${1:parameters})" },
		{ "trigger": "tex1D", "contents": "tex1D(${1:parameters})" },
		{ "trigger": "tex1Dbias", "contents": "tex1Dbias(${1:parameters})" },
		{ "trigger": "tex1Dgrad", "contents": "tex1Dgrad(${1:parameters})" },
		{ "trigger": "tex1Dlod", "contents": "tex1Dlod(${1:parameters})" },
		{ "trigger": "tex1Dproj", "contents": "tex1Dproj(${1:parameters})" },
		{ "trigger": "tex2D", "contents": "tex2D(${1:parameters})" },
		{ "trigger": "tex2D", "contents": "tex2D(${1:parameters})" },
		{ "trigger": "tex2Dbias", "contents": "tex2Dbias(${1:parameters})" },
		{ "trigger": "tex2Dgrad", "contents": "tex2Dgrad(${1:parameters})" },
		{ "trigger": "tex2Dlod", "contents": "tex2Dlod(${1:parameters})" },
		{ "trigger": "tex2Dproj", "contents": "tex2Dproj(${1:parameters})" },
		{ "trigger": "tex3D", "contents": "tex3D(${1:parameters})" },
		{ "trigger": "tex3D", "contents": "tex3D(${1:parameters})" },
		{ "trigger": "tex3Dbias", "contents": "tex3Dbias(${1:parameters})" },
		{ "trigger": "tex3Dgrad", "contents": "tex3Dgrad(${1:parameters})" },
		{ "trigger": "tex3Dlod", "contents": "tex3Dlod(${1:parameters})" },
		{ "trigger": "tex3Dproj", "contents": "tex3Dproj(${1:parameters})" },
		{ "trigger": "texCUBE", "contents": "texCUBE(${1:parameters})" },
		{ "trigger": "texCUBE", "contents": "texCUBE(${1:parameters})" },
		{ "trigger": "texCUBEbias", "contents": "texCUBEbias(${1:parameters})" },
		{ "trigger": "texCUBEgrad", "contents": "texCUBEgrad(${1:parameters})" },
		{ "trigger": "texCUBElod", "contents": "texCUBElod(${1:parameters})" },
		{ "trigger": "texCUBEproj", "contents": "texCUBEproj(${1:parameters})" },
		{ "trigger": "transpose", "contents": "transpose(${1:parameters})" },
		{ "trigger": "trunc", "contents": "trunc(${1:parameters})" }

	]
}