{ "name": "HLSL",
  "scopeName": "source.hlsl",
  "fileTypes": ["hlsl", "fx"],
  "uuid": "f42f5931-4574-438e-a6f8-b406cade4616",
  "patterns": [
      {
          "name": "constant.numeric.hlsl", 
          "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
      }, 
      {
          "name": "constant.language.hlsl",
          "match":  "\\b(true|false)\\b"
      },
      {
          "comment": "General flow control keywords", 
          "name": "keyword.control.hlsl", 
          "match": "\\b(break|case|compile|continue|default|discard|do|else|for|goto|if|return|switch|while)\\b"
      }, 
      {
          "comment": "Flow control attributes", 
          "name": "keyword.control.hlsl", 
          "match": "\\b(flatten|branch|forecase|call|unroll|loop|fastopt|allow_uav_condition)\\b"
      }, 
      {
          "comment": "Generic data types", 
          "name": "storage.type.hlsl", 
          "match": "\\b(Buffer|class|struct|string|typedef|void)\\b"
      }, 
      {
          "comment": "Scalar, vector and matrix data types", 
          "name": "storage.type.hlsl", 
          "match": "\\b(vector|matrix|(bool|double|float|half|int|uint)([1-4](x[1-4])?)?|(min16(float|int|uint))|min10float|min12int)\\b"
      }, 
      {
          "comment": "Sampler types", 
          "name": "storage.type.hlsl", 
          "match": "\\b(sampler(1D|2D|3D|CUBE|_state)?|SamplerState)\\b"
      }, 
      {
          "comment": "Shader types", 
          "name": "storage.type.hlsl", 
          "match": "\\b(pass|technique|technique10|SetVertexShader|SetGeometryShader|SetPixelShader|CompileShader|ShaderFunction|SetDepthStencilState|SetRasterizerState|SetBlendState)\\b"
      }, 
      {
          "comment": "Texture types", 
          "name": "storage.type.hlsl", 
          "match": "\\b(texture|Texture((1D|2D)(Array)?|3D|Cube))\\b"
      }, 
      {
          "comment": "Legacy types", 
          "name": "storage.type.hlsl", 
          "match": "\\b(DWORD|FLOAT|VECTOR|MATRIX|STRING|TEXTURE|PIXELSHADER|VERTEXSHADER)\\b"
      }, 
      {
          "comment": "Storage modifierss", 
          "name": "storage.modifier.hlsl", 
          "match": "\\b(extern|precise|shared|groupshared|packoffset|register|snorm|static|uniform|unorm|volatile)\\b"
      }, 
      {
          "comment": "Type modifiers", 
          "name": "storage.modifier.hlsl", 
          "match": "\\b(const|row_major|column_major)\\b"
      }, 
      {
          "comment": "Function parameter modifiers", 
          "name": "storage.modifier.hlsl", 
          "match": "\\b(in|inout|out)\\b"
      },
      {
          "comment": "Shader Model 4 struct interpolation modifierss", 
          "name": "storage.modifier.hlsl", 
          "match": "\\b(centroid|linear|nointerpolation|noperspective|sample)\\b"
      },
      {
          "comment": "Intrinsic functions",
          "name": "support.function", 
          "match": "\\b(abort|abs|acos|all|AllMemoryBarrier|AllMemoryBarrierWithGroupSync|any|asdouble|asfloat|asin|asint|asuint|asuint|atan|atan2|ceil|clamp|clip|cos|cosh|countbits|cross|D3DCOLORtoUBYTE4|ddx|ddx_coarse|ddx_fine|ddy|ddy_coarse|ddy_fine|degrees|determinant|DeviceMemoryBarrier|DeviceMemoryBarrierWithGroupSync|distance|dot|dst|errorf|EvaluateAttributeAtCentroid|EvaluateAttributeAtSample|EvaluateAttributeSnapped|exp|exp2|f16tof32|f32tof16|faceforward|firstbithigh|firstbitlow|floor|fma|fmod|frac|frexp|fwidth|GetRenderTargetSampleCount|GetRenderTargetSamplePosition|GroupMemoryBarrier|GroupMemoryBarrierWithGroupSync|InterlockedAdd|InterlockedAnd|InterlockedCompareExchange|InterlockedCompareStore|InterlockedExchange|InterlockedMax|InterlockedMin|InterlockedOr|InterlockedXor|isfinite|isinf|isnan|ldexp|length|lerp|lit|log|log10|log2|mad|max|min|modf|msad4|mul|noise|normalize|pow|printf|Process2DQuadTessFactorsAvg|Process2DQuadTessFactorsMax|Process2DQuadTessFactorsMin|ProcessIsolineTessFactors|ProcessQuadTessFactorsAvg|ProcessQuadTessFactorsMax|ProcessQuadTessFactorsMin|ProcessTriTessFactorsAvg|ProcessTriTessFactorsMax|ProcessTriTessFactorsMin|radians|rcp|reflect|refract|reversebits|round|rsqrt|saturate|sign|sin|sincos|sinh|smoothstep|sqrt|step|tan|tanh|tex1D|tex1D|tex1Dbias|tex1Dgrad|tex1Dlod|tex1Dproj|tex2D|tex2D|tex2Dbias|tex2Dgrad|tex2Dlod|tex2Dproj|tex3D|tex3D|tex3Dbias|tex3Dgrad|tex3Dlod|tex3Dproj|texCUBE|texCUBE|texCUBEbias|texCUBEgrad|texCUBElod|texCUBEproj|transpose|trunc)\\b"
      },
      {
          "comment": "Effect states",
          "name": "support.other.variable",
          "match": "\\b(?i:(RasterizerState|DepthStencilState|BlendState|VertexShader|PixelShader|GeometryShader|BlendEnable|SrcBlend|DestBlend|BlendOp|SrcBlendAlpha|DestBlendAlpha|BlendOpAlpha|RenderTargetWriteMask|AlphaToCoverageEnable|IndependentBlendEnable|DepthEnable|DepthWriteMask|DepthFunc|StencilEnable|StencilReadMask|StencilWriteMask|FrontStencilFail|FrontStencilZFail|FrontStencilPass|FrontStencilFunc|BackStencilFail|BackStencilZFail|BackStencilPass|BackStencilFunc|FillMode|CullMode|FrontCounterClockwise|DepthBias|DepthBiasClamp|SlopeScaledDepthBias|DepthClipEnable|ScissorEnable|MultisampleEnable|AntialiasedLineEnable|Filter|AddressU|AddressV|AddressW|MipLODBias|MaxAnisotropy|ComparisonFunc|BorderColor|MinLOD|MaxLOD|DS_STENCILREF|AB_BLENDFACTOR|AB_SAMPLEMASK))\\b"
      },
      {
          "comment": "Shader models",
          "name": "support.type",
          "match": "\\b(ps_1_[1-4]|vs_1_1|(ps|vs)_2_([0ab]|sw)|x?[pv]s_3_0|[gpv]s_4_[01]|[cpgv]s_(4_0|4_1|5_0)|ds_5_0)\\b"
      },
      {
        "comment": "Keywords imported by C that do not exist in HLSL",
        "name": "invalid.illegal.hlsl",
        "match": "\\b(_Bool|_Complex|_Imaginary|inline|restrict)\\b"
      },
      {
          "comment": "Reserved but unused keywords", 
          "name": "invalid.illegal.hlsl",
          "match": "\\b(auto|case|catch|char|class|const_cast|default|delete|dynamic_cast|enum|explicit|friend|goto|long|mutable|new|operator|private|protected|public|reinterpret_cast|short|signed|sizeof|static_cast|template|this|throw|try|typename|union|unsigned|using|virtual)\\b"
      },
      {
        "include": "source.c"
      }
  ]
}